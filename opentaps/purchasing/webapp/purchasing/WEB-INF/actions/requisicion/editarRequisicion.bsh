import org.ofbiz.base.util.*;
import org.opentaps.common.util.UtilClassification;
import org.opentaps.common.util.UtilCommon;
import org.opentaps.common.util.UtilAccountingTags;
import javolution.util.FastList;
import java.util.List;
import org.ofbiz.base.util.UtilHttp;
import org.ofbiz.base.crypto.HashCrypt;
import javolution.util.FastMap;
import org.opentaps.common.util.UtilConfig;
import org.opentaps.common.util.UtilCommon;
import org.ofbiz.base.util.UtilValidate;
import org.ofbiz.entity.condition.EntityExpr;
import org.ofbiz.entity.condition.EntityOperator;
import javax.servlet.ServletContext;
import org.ofbiz.base.component.ComponentConfig;
import org.ofbiz.base.util.UtilProperties;
import org.ofbiz.entity.condition.*;
import org.ofbiz.entity.util.EntityUtil;
import org.ofbiz.common.AB.UtilWorkflow;


Requisicion = delegator.findByPrimaryKey("Requisicion", UtilMisc.toMap("requisicionId", requisicionId));
context.put("Requisicion",Requisicion);

DetalleRequisicion = delegator.findByAnd("DetalleRequisicion", UtilMisc.toMap("requisicionId", requisicionId));
context.put("DetalleRequisicion",DetalleRequisicion);

fechaContable = Requisicion.get("fechaContable");

Calendar calendar = Calendar.getInstance();

if(fechaContable != null){
	calendar.setTime(fechaContable);
}else{
	calendar.setTimeInMillis(System.currentTimeMillis());
}

listAreas = UtilClassification.getListaCatalogos("NivelesParty", delegator, "",true);
context.put("listAreas",listAreas);
 
listAlmacenes = delegator.findAll("Facility");
context.put("listAlmacenes",listAlmacenes);
 
organizationPartyId = UtilCommon.getOrganizationPartyId(request);
cicloId = UtilCommon.getCicloId(request);
context.put("tagTypes", UtilAccountingTags.getClassificationTagsForOrganization(organizationPartyId, cicloId, UtilAccountingTags.EGRESO_TAG, delegator));
    
conditionsSolicitante = UtilMisc.toList(
    new EntityExpr("partyId", EntityOperator.EQUALS, userLogin.get("partyId")),
    new EntityExpr("roleTypeId", EntityOperator.EQUALS, "SOLICITANTE")    
 );
 rolesSolicitante = delegator.findByCondition("PartyRole", new EntityConditionList(conditionsSolicitante, EntityOperator.AND), null, null);
 context.put("rolesSolicitante", rolesSolicitante);

conditionsAutorizador = UtilMisc.toList(
    new EntityExpr("partyId", EntityOperator.EQUALS, userLogin.get("partyId")),
    new EntityExpr("roleTypeId", EntityOperator.EQUALS, "AUTORIZADOR")    
 );
 rolesAutorizador = delegator.findByCondition("PartyRole", new EntityConditionList(conditionsAutorizador, EntityOperator.AND), null, null);
 context.put("rolesAutorizador", rolesAutorizador);

 requisicionId = parameters.get("requisicionId");
context.put("comentarios", UtilWorkflow.getComentarios(delegator, requisicionId,"REQUISICION"));

conditionsStatusAutorizacion = UtilMisc.toList(
    new EntityExpr("personParentId", EntityOperator.EQUALS, userLogin.get("partyId")),
    new EntityExpr("origenId", EntityOperator.EQUALS, requisicionId),
    new EntityExpr("tipoWorkFlowId", EntityOperator.EQUALS, "REQUISICION")
 );

 statusAutorizacion = delegator.findByCondition("StatusAutorizacionWorkFlow", new EntityConditionList(conditionsStatusAutorizacion, EntityOperator.AND), null, null);
 context.put("statusAutorizacion", statusAutorizacion);
 
 orderDetReqAnt = UtilMisc.toList("detalleRequisicionId");
 conditionsDetReqAnt = UtilMisc.toList(new EntityExpr("requisicionId", EntityOperator.EQUALS, requisicionId));
 
 detalleReqAntList = delegator.findByCondition("DetalleRequisicion", new EntityConditionList(conditionsDetReqAnt, EntityOperator.AND), null, orderDetReqAnt);

if(!detalleReqAntList.isEmpty()){
detalleReqAnt = detalleReqAntList.get(detalleReqAntList.size()-1);
context.put("detalleReqAnt", detalleReqAnt);
}else{
context.put("detalleReqAnt", GenericValue.create(delegator.getModelEntity("DetalleRequisicion")));}

context.put("autorizadores", UtilWorkflow.getAutorizadoresAprobados(delegator, requisicionId,"REQUISICION"));