/*
 * Copyright (c) Open Source Strategies, Inc.
 * 
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

import org.ofbiz.base.util.*;
import org.ofbiz.entity.condition.*;
import org.ofbiz.entity.util.EntityUtil;
import org.ofbiz.party.contact.ContactHelper;
import org.opentaps.common.util.UtilClassification;

/*
 * This script serves to initialize the order entry process.  It will
 * determine whether a new shopping cart should be initialized or
 * whether to use an existing one.  This supercedes the initialization
 * of a cart in ShoppingCartEvents.getCartObject().
 *
 * The product store to use is configured in purchasing.properties
 * and is initialized in the sesssion in main-decorator.bsh.
 *
 * TODO: another technique is to define PurchasingShoppingCart after
 * WebShoppingCart which initializes this information, then override
 * getCartObject to use that one... but this requires refactoring 
 * to finally make choice of cart class as noted in WebShoppingCart.
 */


 listAreas = UtilClassification.getListaCatalogos("NivelesParty", delegator, "",true);	
 context.put("listAreas",listAreas);
 
 listMonedas = delegator.findByAnd("Uom", UtilMisc.toMap("uomTypeId", "CURRENCY_MEASURE"));
 context.put("listMonedas",listMonedas);

listStatus = delegator.findByAnd("Estatus", UtilMisc.toMap("tipo", "A"));
 context.put("listStatus",listStatus);

listUom = delegator.findAll("UomAndType");
 context.put("listUom",listUom);

listFacility = delegator.findAll("Facility");
 context.put("listFacility",listFacility);

 listTipoActivoFijo = delegator.findAll("FixedAssetType");
 context.put("listTipoActivoFijo",listTipoActivoFijo);

listUbicacionRapida = delegator.findAll("UbicacionRapida");
 context.put("listUbicacionRapida",listUbicacionRapida);
 
 listAlmacenes = delegator.findAll("Facility");
 context.put("listAlmacenes",listAlmacenes);

 listEstadoFisico = delegator.findAll("EstadoFisicoActivo");
 context.put("listEstadoFisico",listEstadoFisico);
 
 listTipoUnidadVehiculo = delegator.findAll("TipoUnidadVehiculo");
 context.put("listTipoUnidadVehiculo",listTipoUnidadVehiculo);
 
 listMotivosAlta = delegator.findByCondition("MotivosControlPat", EntityCondition.makeCondition("tipoMovimiento",EntityOperator.EQUALS, "A"), null, null);
 context.put("listMotivosAlta",listMotivosAlta);
 
  
 