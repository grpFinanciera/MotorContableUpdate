/*
 * Copyright (c) Open Source Strategies, Inc.
 * 
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.entity.condition.*;
import org.opentaps.common.util.UtilCommon;
import org.ofbiz.entity.GenericValue;
import org.ofbiz.base.util.Debug;

options = UtilCommon.DISTINCT_READ_OPTIONS;
orderBy = UtilMisc.toList("groupName");
userLogin = request.getAttribute("userLogin");
userLoginStr = userLogin.getString("userLoginId");
prefOrganizationStr = "";

orgCondition = new EntityConditionList( UtilMisc.toList(
               new EntityExpr("userLoginId", EntityOperator.EQUALS, userLoginStr),
               new EntityExpr("preferenceName", EntityOperator.EQUALS, "organizationPartyId")
               ), EntityOperator.AND);
prefOrganization = delegator.findByCondition("UserLoginViewPreference", orgCondition, null, UtilMisc.toList("preferenceValue"));
if (prefOrganization.isEmpty())
{
	prefOrganizationStr = null;
}

prefOrgIterator = prefOrganization.iterator();
while (prefOrgIterator.hasNext())
{
	prefOrg = prefOrgIterator.next();
	prefOrganizationStr = prefOrg.getString("preferenceValue");
}

conditions = new EntityConditionList( UtilMisc.toList(
             new EntityExpr("roleTypeId", EntityOperator.EQUALS, "INTERNAL_ORGANIZATIO"),
             new EntityExpr("ptyAcctgPrefPartyId", EntityOperator.NOT_EQUAL, null)
             ), EntityOperator.AND);
configuredOrganizations = delegator.findByCondition("PartyAcctgPreferenceRoleAndDetail", conditions, null, null, orderBy, options);
               
if (prefOrganizationStr != null)
{
	confOrgsIterator = configuredOrganizations.iterator();
	while (confOrgsIterator.hasNext())
	{
		confOrg = confOrgsIterator.next();
		listOrganization = confOrg.getString("partyId");
		if (listOrganization.equals(prefOrganizationStr))
		{
			configuredOrganization = confOrg;
	    }    
	}
	configuredOrganizationList = UtilMisc.toList(configuredOrganization);
	context.put("configuredOrganizations", configuredOrganizationList);
}
else
{
	context.put("configuredOrganizations", configuredOrganizations);
}

conditions = new EntityConditionList( UtilMisc.toList(
            new EntityExpr("roleTypeId", EntityOperator.EQUALS, "INTERNAL_ORGANIZATIO"),
            new EntityExpr("ptyAcctgPrefPartyId", EntityOperator.EQUALS, null)
            ), EntityOperator.AND);
unconfiguredOrganizations = delegator.findByCondition("PartyAcctgPreferenceRoleAndDetail", conditions, null, null, orderBy, options);
context.put("unconfiguredOrganizations", unconfiguredOrganizations);
