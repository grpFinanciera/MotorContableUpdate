/* 
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

import java.util.ArrayList;

import org.ofbiz.base.util.*;
import org.ofbiz.entity.condition.*;
import org.ofbiz.entity.util.*;
import org.opentaps.common.util.UtilClassification;
import org.opentaps.common.util.UtilCommon;
import org.opentaps.common.util.UtilAccountingTags;
import javolution.util.FastList;

// userLogin's emails (might want to use crmsfa.PartyContactHelper instead)
userLogin = context.get("userLogin");

//print("userLogin: " + userLogin);

invoiceId = parameters.get("invoiceId");
idOrdenCobro = parameters.get("idOrdenCobro");
//print("invoiceId: " + invoiceId);
//print("idOrdenCobro: " + idOrdenCobro);
context.put("invoiceId", invoiceId);
context.put("idOrdenCobro", idOrdenCobro);


condiciones = UtilMisc.toList(
		new EntityExpr("invoiceId", EntityOperator.EQUALS, invoiceId));
		
datosInvoice = delegator.findByCondition("InvoicePartyEventoContable", new EntityConditionList(condiciones, EntityOperator.AND) , null, null);
//print("datosInvoice: " + datosInvoice);

context.put("datosInvoice",datosInvoice);

organizationPartyId = UtilCommon.getOrganizationPartyId(request);
cicloId = UtilCommon.getCicloId(request);
context.put("tagTypes", UtilAccountingTags.getClassificationTagsForOrganization(organizationPartyId,cicloId, UtilAccountingTags.EGRESO_TAG, delegator));



modulo = "TESORERIA_CXC_PAG";

andExprs = FastList.newInstance();
    andExprs.add(new EntityExpr("moduloId", EntityOperator.EQUALS, modulo));

thisCond = new FastList();
        thisCond.addAll(andExprs);        
        mainCond = new EntityConditionList(thisCond, EntityOperator.AND);


// obtener el catalogo de eventos
eventos = delegator.findByCondition("EventoContable", mainCond,
              UtilMisc.toList("descripcion", "acctgTransTypeId", "moduloId"), UtilMisc.toList("descripcion"));                    

context.put("eventos", eventos);