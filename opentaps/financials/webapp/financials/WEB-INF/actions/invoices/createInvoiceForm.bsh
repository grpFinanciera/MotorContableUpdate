/* 
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.entity.util.EntityUtil;
import org.opentaps.common.util.UtilCommon;
import org.ofbiz.accounting.util.UtilAccounting;

import org.ofbiz.entity.condition.EntityCondition;
import org.ofbiz.entity.condition.EntityConditionList;
import org.ofbiz.entity.condition.EntityOperator;

organizationPartyId = UtilCommon.getOrganizationPartyId(request);
if (organizationPartyId == null) {
    return;
}

invoiceTypeId = context.get("invoiceTypeId");
isReceipt = null;
if ("SALES_INVOICE".equals(invoiceTypeId)) {
    context.put("screenState", "createSalesInvoice");
    isReceipt = true;
} else if ("PURCHASE_INVOICE".equals(invoiceTypeId)) {
    context.put("screenState", "createPurchInvoice");
    isReceipt = false;
} else if ("CUST_RTN_INVOICE".equals(invoiceTypeId)) {
    context.put("screenState", "createRtnInvoice");
    isReceipt = false;
} else if ("COMMISSION_INVOICE".equals(invoiceTypeId)) {
    context.put("screenState", "createCommInvoice");
    isReceipt = false;
}

context.put("isReceipt", isReceipt);
context.put("isDisbursement", !isReceipt);

idModulo = "";

if (isReceipt) {
    context.put("decoratorLocation", "component://financials/widget/financials/screens/receivables/ReceivablesScreens.xml");
	idModulo="TESORERIA_CXC_OR";
} else {
    context.put("decoratorLocation", "component://financials/widget/financials/screens/payables/PayablesScreens.xml");
	idModulo="TESORERIA_CXP_OR";
}

glAccounts = delegator.findByAndCache("GlAccountOrganizationAndClass", UtilMisc.toMap("organizationPartyId", organizationPartyId), UtilMisc.toList("accountCode"));
context.put("glAccounts", glAccounts);

tiposDocumento = delegator.findByAnd("EventoContable", UtilMisc.toMap("moduloId", idModulo), UtilMisc.toList("descripcion"));
context.put("tiposDocumento", tiposDocumento);

	//Aqui se crean los filtros para el lookup de agrupador
	if(tiposDocumento != null && !tiposDocumento.isEmpty() && !isReceipt){
		context.put("momentoId1", tiposDocumento.get(0).getString("mComparativo"));
		
		//Buscamos el tipo de poliza para filtrar las claves presupuestales
		//tipoPolizaId = UtilAccounting.buscarIdPolizaXDocu(tiposDocumento.get(0).getString("acctgTransTypeId"),delegator);
		//context.put("tipoPolizaId", tipoPolizaId);
		
	}

itemTypeMap = delegator.findByAndCache("InvoiceItemTypeMap", UtilMisc.toMap("invoiceTypeId", invoiceTypeId));
itemTypes = EntityUtil.getRelatedCache("InvoiceItemType", itemTypeMap);
context.put("invoiceItemTypes", itemTypes);
context.put("currencies", delegator.findByAndCache("Uom", UtilMisc.toMap("uomTypeId", "CURRENCY_MEASURE"), UtilMisc.toList("abbreviation")));

orderTipoPagoBy = UtilMisc.toList("description");
condicionTipoPago = EntityCondition.makeCondition("parentTypeId",EntityOperator.EQUALS,"DISBURSEMENT");
tipoPago = delegator.findByCondition("PaymentType", condicionTipoPago , null, orderTipoPagoBy);
print("tipoPago: " + tipoPago);
context.put("tipoPago", tipoPago);
