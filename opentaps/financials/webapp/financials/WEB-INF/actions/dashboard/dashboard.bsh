/* 
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

import com.opensourcestrategies.financials.reports.JFreeFinancialCharts;
import com.opensourcestrategies.financials.util.UtilFinancial;
import javolution.util.FastList;
import javolution.util.FastMap;
import javolution.util.FastSet;
import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.entity.condition.*;
import org.ofbiz.entity.util.EntityUtil;
import org.opentaps.common.util.UtilCommon;
import org.opentaps.domain.DomainsLoader;

// this routine looks up all the GlAccountOrganiations of a particular type for the dashboard
// and adds to the accountsMap of glAccountTypeId -> total balance
List lookupAccounts(List typesToLookup, Map accountsMap) {
    conditions = UtilMisc.toList(
        new EntityExpr("glAccountTypeId", EntityOperator.IN, typesToLookup),
        new EntityExpr("organizationPartyId", EntityOperator.EQUALS, organizationPartyId),
        EntityUtil.getFilterByDateExpr()
        );
    // GlAccountOrganizationAndClass has all the accounts of the organization
    // GlAccountTypeOrganization only has the account defined by GlAccountTypeDefault, so one account per type
    accounts = delegator.findByAnd("GlAccountOrganizationAndClass", conditions);
    // add to the accountsMap balance for this type
    for (account: accounts) {
        UtilMisc.addToBigDecimalInMap(accountsMap, account.getString("glAccountTypeId"), account.getBigDecimal("postedBalance"));
    }
    return accounts;
}

security = request.getAttribute("security");
print("Security  dashboard ---> "+security);
if (security == null) return;

organizationPartyId = UtilCommon.getOrganizationPartyId(request);
if (organizationPartyId == null) {
    return;
}

// show AR and AP accounts depending on permissions TODO: see if we can use the security parameters set up in main-decorator.bsh
hasReceivablesPermission = security.hasEntityPermission("FINANCIALS", "_AR_VIEW", userLogin);
hasPayablesPermission = security.hasEntityPermission("FINANCIALS", "_AP_VIEW", userLogin);
hasReportsPermission = security.hasEntityPermission("FINANCIALS", "_RPT_VIEW", userLogin);

// get the balances for each group of gl account types
accountsMap = new HashMap();
if (hasReceivablesPermission) {
    context.put("cashEquivalentAccounts", lookupAccounts(UtilMisc.toList("UNDEPOSITED_RECEIPTS", "BANK_STLMNT_ACCOUNT" ), accountsMap));
    context.put("accountsReceivablesAccounts", lookupAccounts(UtilMisc.toList("ACCOUNTS_RECEIVABLE"), accountsMap));
}
if (hasPayablesPermission) {
    context.put("accountsPayablesAccounts", lookupAccounts(UtilMisc.toList("ACCOUNTS_PAYABLE", "COMMISSIONS_PAYABLE", "UNINVOICED_SHIP_RCPT"), accountsMap));
}
if (hasReportsPermission) {
    context.put("inventoryAccounts", lookupAccounts(UtilMisc.toList("INVENTORY_ACCOUNT", "RAWMAT_INVENTORY", "WIP_INVENTORY", "INV_ADJ_AVG_COST"), accountsMap));
}

// set the currency for displaying the balances
organizationDomain = new DomainsLoader(request).loadDomainsDirectory().getOrganizationDomain();
repo = organizationDomain.getOrganizationRepository();
organization = repo.getOrganizationById(organizationPartyId);
if ((organization != null) && (organization.getPartyAcctgPreference() != null)) {
    context.put("orgCurrencyUomId", organization.getPartyAcctgPreference().getBaseCurrencyUomId());
}

// get the credit card settlement accounts' balances
creditCardAccounts = null;
if (hasReceivablesPermission) {
  creditCardAccounts = delegator.findByAnd("CreditCardTypeGlAccount", UtilMisc.toMap("organizationPartyId", organizationPartyId));
  glAccountIds = EntityUtil.getFieldListFromEntityList(creditCardAccounts, "glAccountId", true);
  if (glAccountIds.size() > 0) {
      conditions = UtilMisc.toList(
              new EntityExpr("glAccountId", EntityOperator.IN, glAccountIds),
              new EntityExpr("organizationPartyId", EntityOperator.EQUALS, organizationPartyId),
              EntityUtil.getFilterByDateExpr()
              );
      creditCardAccounts = delegator.findByAnd("GlAccountOrganizationAndClass", conditions);
  }
}
if (creditCardAccounts != null) {
    // make it available in the FTL
    context.put("creditCardAccounts", creditCardAccounts);
    // add it to the accounts map
    for (account: creditCardAccounts) {
        UtilMisc.addToBigDecimalInMap(accountsMap, account.getString("glAccountTypeId"), account.getBigDecimal("postedBalance"));
    }
}
context{"chartImage"} = JFreeFinancialCharts.createLiquiditySnapshotChart(accountsMap, creditCardAccounts, locale, hasReceivablesPermission, hasPayablesPermission, hasReportsPermission);

hasFinancialsViewPermission = false;
hasFinancialsConfigPermission = false;
hasFinancialsPayablesPermission = false;
hasFinancialsEmployeesPermission = false;
hasFinancialsReceivablesPermission = false;
hasFinancialsTransactionPermission = false;
hasFinancialsReportsPermission = false;
hasFinancialsAPInvoiceViewPermission = false;
hasFinancialsAPInvoiceCreatePermission = false;
hasFinancialsAPInvoiceUpdatePermission = false;
hasFinancialsAPPaymentViewPermission = false;
hasFinancialsAPPaymentCreatePermission = false;
hasFinancialsAPPaymentUpdatePermission = false;
hasFinancialsAPPaymentApplyPermission = false;
hasFinancialsARInvoiceViewPermission = false;
hasFinancialsARInvoiceCreatePermission = false;
hasFinancialsARInvoiceUpdatePermission = false;
hasFinancialsARPaymentViewPermission = false;
hasFinancialsARPaymentCreatePermission = false;
hasFinancialsARPaymentUpdatePermission = false;
hasFinancialsARPaymentApplyPermission = false;
hasViewAgreementPermission = false;
hasCreateAgreementPermission = false;
hasUpdateAgreementPermission = false;


if (security != null && userLogin != null) {
	// check for financials view permission
	if (security.hasEntityPermission("FINANCIALS", "_VIEW", userLogin)) {
	  hasFinancialsViewPermission = true;
	}
  
	// check for configuration permission
	if (security.hasEntityPermission("FINANCIALS", "_CONFIG", userLogin)) {
	  hasFinancialsConfigPermission = true;
	}
  
	//check for Payables Tab permission
	if (security.hasEntityPermission("FINANCIALS", "_AP_VIEW", userLogin)) {
	  hasFinancialsPayablesPermission = true;
	}
  
	//check for Employees Tab permission
	if (security.hasEntityPermission("FINANCIALS", "_EMP_VIEW", userLogin)) {
	  hasFinancialsEmployeesPermission = true;
	}
  
	//check for Receivables Tab permission
	if (security.hasEntityPermission("FINANCIALS", "_AR_VIEW", userLogin)) {
	  hasFinancialsReceivablesPermission = true;
	}
  
	//check for Transaction Tab permission
	if (security.hasEntityPermission("FINANCIALS", "_TX_VIEW", userLogin)) {
	  hasFinancialsTransactionPermission = true;
	}
  
	//check for Reports Tab permission
	if (security.hasEntityPermission("FINANCIALS", "_RPT_VIEW", userLogin)) {
	  hasFinancialsReportsPermission = true;
	}
  
	//check for AP/AR Invoices/Payments permission
	if (security.hasEntityPermission("FINANCIALS", "_AP_INVIEW", userLogin)) {
	  hasFinancialsAPInvoiceViewPermission = true;
	}
	if (security.hasEntityPermission("FINANCIALS", "_AP_INCRTE", userLogin)) {
	  hasFinancialsAPInvoiceCreatePermission = true;
	}
	if (security.hasEntityPermission("FINANCIALS", "_AP_INUPDT", userLogin)) {
	  hasFinancialsAPInvoiceUpdatePermission = true;
	}
	if (security.hasEntityPermission("FINANCIALS", "_AP_PVIEW", userLogin)) {
	  hasFinancialsAPPaymentViewPermission = true;
	}
	if (security.hasEntityPermission("FINANCIALS", "_AP_PCRTE", userLogin)) {
	  hasFinancialsAPPaymentCreatePermission = true;
	}
	if (security.hasEntityPermission("FINANCIALS", "_AP_PUPDT", userLogin)) {
	  hasFinancialsAPPaymentUpdatePermission = true;
	}
	if (security.hasEntityPermission("FINANCIALS", "_AP_PAPPL", userLogin)) {
	  hasFinancialsAPPaymentApplyPermission = true;
	}
	if (security.hasEntityPermission("FINANCIALS", "_AR_INVIEW", userLogin)) {
	  hasFinancialsARInvoiceViewPermission = true;
	}
	if (security.hasEntityPermission("FINANCIALS", "_AR_INCRTE", userLogin)) {
	  hasFinancialsARInvoiceCreatePermission = true;
	}
	if (security.hasEntityPermission("FINANCIALS", "_AR_INUPDT", userLogin)) {
	  hasFinancialsARInvoiceUpdatePermission = true;
	}
	if (security.hasEntityPermission("FINANCIALS", "_AR_PVIEW", userLogin)) {
	  hasFinancialsARPaymentViewPermission = true;
	}
	if (security.hasEntityPermission("FINANCIALS", "_AR_PCRTE", userLogin)) {
	  hasFinancialsARPaymentCreatePermission = true;
	}
	if (security.hasEntityPermission("FINANCIALS", "_AR_PUPDT", userLogin)) {
	  hasFinancialsARPaymentUpdatePermission = true;
	}
	if (security.hasEntityPermission("FINANCIALS", "_AR_PAPPL", userLogin)) {
	  hasFinancialsARPaymentApplyPermission = true;
	}
	if (security.hasEntityPermission("FINANCIALS", "_COMM_VIEW", userLogin)) {
		hasViewAgreementPermission = true;
	}
	if (security.hasEntityPermission("FINANCIALS", "_COMM_UPDT", userLogin) &&
		security.hasEntityPermission("ACCOUNTING", "_CREATE", userLogin)) {
		hasCreateAgreementPermission = true;
	}
	if (security.hasEntityPermission("FINANCIALS", "_COMM_UPDT", userLogin) &&
		security.hasEntityPermission("ACCOUNTING", "_UPDATE", userLogin)) {
		hasUpdateAgreementPermission = true;
	}
  }
  
  parameters.put("hasFinancialsViewPermission", hasFinancialsViewPermission);
  parameters.put("hasFinancialsConfigPermission", hasFinancialsConfigPermission);
  parameters.put("hasFinancialsPayablesPermission", hasFinancialsPayablesPermission);
  parameters.put("hasFinancialsReceivablesPermission", hasFinancialsReceivablesPermission);
  parameters.put("hasFinancialsTransactionPermission", hasFinancialsTransactionPermission);
  parameters.put("hasFinancialsReportsPermission", hasFinancialsReportsPermission);
  parameters.put("hasFinancialsAPInvoiceViewPermission", hasFinancialsAPInvoiceViewPermission);
  parameters.put("hasFinancialsAPInvoiceCreatePermission", hasFinancialsAPInvoiceCreatePermission);
  parameters.put("hasFinancialsAPInvoiceUpdatePermission", hasFinancialsAPInvoiceUpdatePermission);
  parameters.put("hasFinancialsAPPaymentViewPermission", hasFinancialsAPPaymentViewPermission);
  parameters.put("hasFinancialsAPPaymentCreatePermission", hasFinancialsAPPaymentCreatePermission);
  parameters.put("hasFinancialsAPPaymentUpdatePermission", hasFinancialsAPPaymentUpdatePermission);
  parameters.put("hasFinancialsAPPaymentApplyPermission", hasFinancialsAPPaymentApplyPermission);
  parameters.put("hasFinancialsARInvoiceViewPermission", hasFinancialsARInvoiceViewPermission);
  parameters.put("hasFinancialsARInvoiceCreatePermission", hasFinancialsARInvoiceCreatePermission);
  parameters.put("hasFinancialsARInvoiceUpdatePermission", hasFinancialsARInvoiceUpdatePermission);
  parameters.put("hasFinancialsARPaymentViewPermission", hasFinancialsARPaymentViewPermission);
  parameters.put("hasFinancialsARPaymentCreatePermission", hasFinancialsARPaymentCreatePermission);
  parameters.put("hasFinancialsARPaymentUpdatePermission", hasFinancialsARPaymentUpdatePermission);
  parameters.put("hasFinancialsARPaymentApplyPermission", hasFinancialsARPaymentApplyPermission);
  parameters.put("hasViewAgreementPermission", hasViewAgreementPermission);
  parameters.put("hasCreateAgreementPermission", hasCreateAgreementPermission);
  parameters.put("hasUpdateAgreementPermission", hasUpdateAgreementPermission);
  
