import org.ofbiz.base.util.UtilMisc;
import org.opentaps.common.domain.organization.OrganizationRepository;
import org.opentaps.common.util.UtilAccountingTags;
import org.ofbiz.common.AB.*;
import org.opentaps.base.entities.ClasifPresupuestal;
import org.opentaps.base.entities.EstructuraClave;
import org.opentaps.base.entities.UsoClave;
import org.opentaps.base.entities.FixedAssetType;
import org.opentaps.base.entities.Mes;
import org.opentaps.base.entities.Enumeration;
import org.opentaps.common.util.UtilDate;



import javolution.util.FastMap;
import org.ofbiz.entity.condition.*;
import org.ofbiz.base.util.*;
import org.ofbiz.entity.util.EntityUtil;
import javolution.util.FastList;
import org.opentaps.common.util.UtilConfig;



import org.ofbiz.base.util.*;



idPendienteTesoreria = parameters.get("idPendienteTesoreria");
context.put("idPendienteTesoreria", idPendienteTesoreria);

tipo = parameters.get("tipo");
print("tipo: " + tipo);
context.put("tipo", tipo);

condiciones = new ArrayList();
condiciones.add(new EntityExpr("idPendienteTesoreria", EntityOperator.EQUALS, idPendienteTesoreria));
condiciones.add(new EntityExpr("tipo", EntityOperator.EQUALS, tipo));
datosOrdenPago = delegator.findByCondition("PendienteTesoreriaEventoStatus", new EntityConditionList(condiciones, EntityOperator.AND) , null, null);
print("datosOrdenPago: " + datosOrdenPago);
context.put("datosOrdenPago", datosOrdenPago);

condicionItem = EntityCondition.makeCondition("idPendienteTesoreria",EntityOperator.EQUALS, idPendienteTesoreria);
datosOrdenPagoItem = delegator.findByCondition("PendientesTesoreriaItem", condicionItem , null, null);
print("datosOrdenPagoItem: " + datosOrdenPagoItem);
context.put("datosOrdenPagoItem", datosOrdenPagoItem);

condicionesPoliza = new ArrayList();
condicionesPoliza.add(new EntityExpr("idPendienteTesoreria", EntityOperator.EQUALS, idPendienteTesoreria));
condicionesPoliza.add(new EntityExpr("tipo", EntityOperator.EQUALS, tipo));
condicionesPoliza.add(new EntityExpr("acctgTransId", EntityOperator.NOT_EQUAL, null));
datosPoliza = delegator.findByCondition("PendientesTesoreria",new EntityConditionList(condicionesPoliza, EntityOperator.AND),UtilMisc.toList("acctgTransId", "poliza", "cuentaBancariaId", "bancoId"),UtilMisc.toList("acctgTransId"));
print("datosPoliza: " + datosPoliza);
context.put("datosPoliza", datosPoliza);

bancoId = null;
cuentaBancariaId = null;

if(!datosPoliza.isEmpty()) 
{	datosBancos = datosPoliza.iterator();
    while( datosBancos.hasNext() ) 
    {   datoBanco = datosBancos.next() ;        
    	
        bancoId = datoBanco.getString("bancoId");
        cuentaBancariaId = datoBanco.getString("cuentaBancariaId");        		               
    }
}

if(bancoId!=null && cuentaBancariaId!=null)
{	condicionesBanco = new ArrayList();
	condicionesBanco.add(new EntityExpr("bancoId", EntityOperator.EQUALS, bancoId));
	datosBanco = delegator.findByCondition("Banco",new EntityConditionList(condicionesBanco, EntityOperator.AND),UtilMisc.toList("nombreBanco"),UtilMisc.toList("nombreBanco"));
	condicionesCuenta = new ArrayList();
	condicionesCuenta.add(new EntityExpr("cuentaBancariaId", EntityOperator.EQUALS, cuentaBancariaId));
	datosCuenta = delegator.findByCondition("CuentaBancaria",new EntityConditionList(condicionesCuenta, EntityOperator.AND),UtilMisc.toList("nombreCuenta", "numeroCuenta", "descripcion"),UtilMisc.toList("nombreCuenta"));
	context.put("datosBanco", datosBanco);            
	context.put("datosCuenta", datosCuenta);
}



