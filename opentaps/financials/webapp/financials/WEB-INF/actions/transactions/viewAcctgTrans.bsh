/*
 * Copyright (c) Open Source Strategies, Inc.
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  @author Leon Torres (leon@opensourcestrategies.com)
 */

/*
 * Find the acctg trans and the list of entries for a transaction
 */

import org.ofbiz.base.util.*;
import org.opentaps.common.util.UtilMessage;
import org.opentaps.common.util.UtilCommon;
import org.opentaps.common.util.UtilAccountingTags;
import org.opentaps.domain.DomainsLoader;
import org.opentaps.domain.ledger.AccountingTransaction;
import org.opentaps.foundation.exception.FoundationException;
import org.opentaps.foundation.repository.ofbiz.Repository;
import org.opentaps.foundation.infrastructure.*;
import org.ofbiz.entity.condition.*;
import javolution.util.FastList;

acctgTransId = UtilCommon.getParameter(context, "acctgTransId");
if (acctgTransId == null) {
    // get the ID when multi form is used
    acctgTransId = UtilCommon.getParameter(request, "acctgTransId_o_0"); 
}
dl = new DomainsLoader(new Infrastructure(dispatcher), new User(userLogin));
ledgerDomain = dl.loadDomainsDirectory().getLedgerDomain();
ledgerRepository = ledgerDomain.getLedgerRepository();
ledgerSpecification = ledgerRepository.getSpecification();
try {
    acctgTrans = ledgerRepository.getAccountingTransaction(acctgTransId);
} catch (FoundationException e) {
}

listEntries = delegator.findByAnd("AcctgTransEntrySum",UtilMisc.toMap("acctgTransId",acctgTransId));
context.put("listEntries",listEntries);

currencyUomId = "";
if(!UtilValidate.isEmpty(listEntries)){
	currencyUomId = listEntries.get(0).getString("currencyUomId");
}

if (acctgTrans == null) return;
context.put("accountingTransaction", acctgTrans);
// for compatibility with the ofbiz form
context.put("acctgTrans", Repository.genericValueFromEntity(delegator, acctgTrans));

// for the documentation system
if (acctgTrans.isPosted()) {
    context.put("screenState", "viewTransaction");
} else {
    context.put("screenState", "editTransaction");
}

acctgTransEntries = acctgTrans.getTransactionEntries();
// delete if the transaction can be deleted for the screen
canDeleteTrans = false;
if (UtilValidate.isEmpty(acctgTransEntries)) {
   canDeleteTrans = true;
}
context.put("acctgTransEntries", acctgTransEntries);
context.put("canDeleteTrans", canDeleteTrans);
// better to use sesison than parameters, in case somebody puts organizationPartyId into URL
organizationPartyId = UtilCommon.getOrganizationPartyId(request);
print("Organizacion :   "+organizationPartyId);
context.put("organizationPartyId",organizationPartyId);

// if the transaction is still not posted then populate some data for editing forms
if (!acctgTrans.isPosted()) {
    glAccounts = delegator.findByAnd("GlAccountOrganizationAndClass", UtilMisc.toMap("organizationPartyId", organizationPartyId));
    context.put("glAccounts", glAccounts);

    debitFlag = UtilMisc.toMap("debitCreditFlag", ledgerSpecification.getDebitFlag(), "description", "Debit");
    creditFlag = UtilMisc.toMap("debitCreditFlag", ledgerSpecification.getCreditFlag(), "description", "Credit");
    context.put("debitCreditFlags", UtilMisc.toList(debitFlag, creditFlag));
}

// get the accounting tags
context.put("tagTypes", UtilAccountingTags.getAccountingTagsForOrganization(organizationPartyId, UtilAccountingTags.TRANSACTION_ENTRY_TAG, delegator));

//put to history
acctgTransType = acctgTrans.getRelatedOne("AcctgTransType");
context{"history"} = UtilCommon.makeHistoryEntry(UtilMessage.expandLabel("FinancialsNavHistoryAcctgTransaction", locale, UtilMisc.toMap("acctgTransId", acctgTransId)), "viewAcctgTrans", UtilMisc.toList("acctgTransId"));

// Get the base currency for the organization
baseCurrencyUomId = UtilCommon.getOrgBaseCurrency(organizationPartyId, delegator);
if(!UtilValidate.isEmpty(currencyUomId)){
	baseCurrencyUomId = currencyUomId;
}
context.put("orgCurrencyUomId", baseCurrencyUomId);



//Se calcula el monto del cheque para impresion (salida de bancos)

entityCondition = UtilMisc.toList(EntityCondition.makeCondition("acctgTransId",EntityOperator.EQUALS,acctgTransId),
							EntityCondition.makeCondition("cuentaBancariaId",EntityOperator.NOT_EQUAL,null));
listSelect = UtilMisc.toList("amount","debitCreditFlag");

condicion = EntityCondition.makeCondition(entityCondition);

print("Condicion cuentas "+condicion);
print("Condicion cuentas select "+listSelect);


listSuma = delegator.findByCondition("SumaBancos",condicion,listSelect,null);

Total = BigDecimal.ZERO;
cargo = BigDecimal.ZERO;
abono = BigDecimal.ZERO;

for(GenericValue sumaPres: listSuma){
	if(sumaPres.getString("debitCreditFlag").equals("C")){
		abono = sumaPres.getBigDecimal("amount");
	} else {
		cargo = sumaPres.getBigDecimal("amount");
	}
}

if(abono.compareTo(cargo) > 0){
	Total = abono.subtract(cargo);
}

print("Total "+Total);

if(Total.compareTo(BigDecimal.ZERO) > 0){
	context.put("TotalCheque",Total);
}
