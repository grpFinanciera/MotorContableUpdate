/*
 * Copyright (c) Open Source Strategies, Inc.
 * 
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 */

import java.util.ArrayList;
import java.util.TreeMap;
import java.math.BigDecimal;

import javolution.util.FastList;
import javolution.util.FastMap;

import org.ofbiz.base.util.Debug;
import org.ofbiz.entity.condition.*;
import org.ofbiz.service.ServiceUtil;
import org.ofbiz.base.util.*;
import org.opentaps.warehouse.inventory.UtilNumberToLetter;

// Groups order items by product

orderId = parameters.get("orderId");
orderItems = context.get("orderItemList");

context.put("orderId", orderId);

if (orderItems == null) return;

productDatas = FastMap.newInstance();

orderItemIter = orderItems.iterator();
while (orderItemIter.hasNext()) {
    orderItem = orderItemIter.next();
    product = orderItem.getRelatedOne("Product");
    productId = product.getString("productId");

    // get or create a new product line
    data = productDatas.get(productId);
    if (data == null) {
        data = FastMap.newInstance();
        data.put("productId", productId);
        data.put("productInternalName", product.getString("internalName"));

        // also get the UPCA
        upca = delegator.findByPrimaryKeyCache("GoodIdentification", UtilMisc.toMap("productId", productId, "goodIdentificationTypeId", "UPCA"));
        if (upca != null) data.put("upca", upca.get("idValue"));
    }

    totalReceived = 0.0;

    // this large block is for getting the back orders fulfilled
    fulfilledOrderDatas = data.get("fulfilledOrderDatas");
    if (fulfilledOrderDatas == null) fulfilledOrderDatas = new TreeMap();
    
    receipts = delegator.findByAnd("ShipmentReceipt", UtilMisc.toMap("orderId", orderId, "orderItemSeqId", orderItem.get("orderItemSeqId")));
    if (receipts != null && receipts.size() > 0) {
        recIter = receipts.iterator();
        while (recIter.hasNext()) {
            rec = recIter.next();

            accepted = rec.getDouble("quantityAccepted");
            rejected = rec.getDouble("quantityRejected");

            quantityReceived = 0.0;

            if (accepted != null)
                quantityReceived += accepted.doubleValue();
            if (rejected != null)
                quantityReceived += rejected.doubleValue();

            totalReceived += quantityReceived;

            // Get the lot ID from the InventoryItems
            inventoryItem = rec.getRelatedOne("InventoryItem");

            // Get the item issuances related to this receipt (this will show back orders
            // fulfilled for already shipped items)
            itemIssuances = delegator.findByAnd("ItemIssuance", UtilMisc.toMap("inventoryItemId", rec.get("inventoryItemId")));
            if (!UtilValidate.isEmpty(itemIssuances)) {
                itemIssuanceIter = itemIssuances.iterator();

                while (itemIssuanceIter.hasNext()) {
                    itemIssuance = itemIssuanceIter.next();
                    itemIssuanceQuantity = itemIssuance.getDouble("quantity") != null? itemIssuance.getDouble("quantity").doubleValue() : 0.0;

                    salesOrderId = itemIssuance.getString("orderId");
                    salesOrderHeader = delegator.findByPrimaryKeyCache("OrderHeader", UtilMisc.toMap("orderId", salesOrderId));

                    if ((salesOrderHeader == null) || !"SALES_ORDER".equals(salesOrderHeader.get("orderTypeId")) || !"ORDER_APPROVED".equals(salesOrderHeader.get("statusId"))) {
                        continue;
                    }

                    quantity = quantityReceived > itemIssuanceQuantity? itemIssuanceQuantity : quantityReceived;

                    if (quantity > 0.0) {
                        String orderId = itemIssuance.getString("orderId");

                        fulfilledOrderData = fulfilledOrderDatas.get(orderId);
                        if (fulfilledOrderData == null) {
                            fulfilledOrderData = UtilMisc.toMap("salesOrderId", orderId, "quantityFulfilled", new Double(quantity));
                        } else {
                            last = (fulfilledOrderData.get("quantityFulfilled") == null ? 0 : fulfilledOrderData.get("quantityFulfilled").doubleValue());
                            fulfilledOrderData.put("quantityFulfilled", new Double(last + quantity));
                        }
                        fulfilledOrderDatas.put(orderId, fulfilledOrderData);
                    }
                }
            }

            // Get the inventory reservations related to this receipt (this will show back orders
            // fulfilled for yet-to-be-shipped items)
            oisgrs = delegator.findByAnd("OrderItemShipGrpInvRes", UtilMisc.toMap("inventoryItemId", rec.get("inventoryItemId")));
            if (!UtilValidate.isEmpty(oisgrs)) {
                oisgrIter = oisgrs.iterator();

                while (oisgrIter.hasNext()) {
                    oisgr = oisgrIter.next();
                    oisgrQuantity = oisgr.getDouble("quantity") != null? oisgr.getDouble("quantity").doubleValue() : 0.0;

                    salesOrderId = oisgr.getString("orderId");
                    salesOrderHeader = delegator.findByPrimaryKeyCache("OrderHeader", UtilMisc.toMap("orderId", salesOrderId));

                    if ((salesOrderHeader == null) || !"SALES_ORDER".equals(salesOrderHeader.getString("orderTypeId")) || !"ORDER_APPROVED".equals(salesOrderHeader.get("statusId"))) {
                        continue;
                    }

                    quantity = quantityReceived > oisgrQuantity? oisgrQuantity : quantityReceived;

                    if (quantity > 0.0) {
                        String orderId = oisgr.getString("orderId");

                        fulfilledOrderData = fulfilledOrderDatas.get(orderId);
                        if (fulfilledOrderData == null) {
                            fulfilledOrderData = UtilMisc.toMap("salesOrderId", orderId, "quantityFulfilled", new Double(quantity));
                        } else {
                            last = (fulfilledOrderData.get("quantityFulfilled") == null ? 0 : fulfilledOrderData.get("quantityFulfilled").doubleValue());
                            fulfilledOrderData.put("quantityFulfilled", new Double(last + quantity));
                        }
                        fulfilledOrderDatas.put(orderId, fulfilledOrderData);
                    }
                }
            }
        }
    }

    // group the quantity received
    totalReceivedGrouped = (data.get("quantityReceived") == null ? 0 : data.get("quantityReceived").doubleValue());
    totalReceivedGrouped += totalReceived;
    data.put("quantityReceived", totalReceivedGrouped);

    data.put("fulfilledOrderDatas", fulfilledOrderDatas);

    productDatas.put(productId, data);
}

// we have to deconstruct the maps and tree maps into a flatter set of data
rows = new ArrayList(productDatas.values()); // ArrayList for using sort_by in ftl
for (iter = rows.iterator(); iter.hasNext(); ) {
    row = iter.next();
    fulfilledOrderDatas = row.remove("fulfilledOrderDatas");
    if (fulfilledOrderDatas == null || fulfilledOrderDatas.size() == 0) continue;
    row.put("fulfilledOrderDatas", fulfilledOrderDatas.values());
}

context.put("productDatas", rows);


numeroFactura = parameters.get("numeroFactura");

condiciones = new ArrayList();
condiciones.add(new EntityExpr("primaryOrderId", EntityOperator.EQUALS, orderId));
condiciones.add(new EntityExpr("numeroFactura", EntityOperator.EQUALS, numeroFactura));
condiciones.add(new EntityExpr("shipmentTypeId", EntityOperator.EQUALS, "PURCHASE_SHIPMENT"));
condiciones.add(new EntityExpr("statusId", EntityOperator.EQUALS, "PURCH_SHIP_RECEIVED"));
shipmentReceipts = delegator.findByCondition("ShipmentsReceiptFormat", new EntityConditionList(condiciones, EntityOperator.AND), null, UtilMisc.toList("shipmentId"));

montoFactura = BigDecimal.ZERO;
proveedor = null;
idAlmacenReceptor = null;
almacenReceptor = null;
shipments = shipmentReceipts.iterator();
while (shipments.hasNext())
{
	shipment = shipments.next();
	createdDate = shipment.getString("fechaContable");
	if (createdDate == null)
	{
		createdDate = shipment.getString("createdDate");
	}
	fechaFactura = shipment.getString("fechaFactura");
	proveedor = shipment.getString("partyIdFrom");
	idAlmacenReceptor= shipment.getString("facilityId");
	almacenReceptor= shipment.getString("facilityName");
	receptorShipment = shipment.getString("receivedByUserLoginId");
	shipment.getBigDecimal("unitPrice");
	montoFactura = montoFactura.add(shipment.getBigDecimal("unitPrice").multiply(shipment.getBigDecimal("quantityAccepted")));
	requisicionId = shipment.get("requisicionId");
	detalleRequisicionId = shipment.get("detalleRequisicionId");
	if (requisicionId != null && detalleRequisicionId != null)
	{
		detalleRequisicion = delegator.findByPrimaryKey("DetalleRequisicion", UtilMisc.toMap("requisicionId", requisicionId, "detalleRequisicionId", detalleRequisicionId));
		if (detalleRequisicion != null)
		{
			descripcionProducto = detalleRequisicion.get("descripcion");
			if (descripcionProducto == null)
			{
				shipment.put("comments", "");
			}
			else
			{
				shipment.put("comments", descripcionProducto);
			}
		}
	}
}
if (proveedor == null)
{
	proveedor = "PROVEEDOR";
}
else
{
	partyGroup = delegator.findByPrimaryKey("PartyGroup", UtilMisc.toMap("partyId", proveedor));
	if (partyGroup != null) 
	{
		proveedor = partyGroup.get("groupName");
	}
	else
	{
		proveedor = "PROVEEDOR";
	}
	
}

if(idAlmacenReceptor == null){
	idAlmacenReceptor = "ID ALMACEN RECEPTOR";
}

if(almacenReceptor == null){
	almacenReceptor = "ALMAC&Eacute;N RECEPTOR";
}

receptor = "RECEPTOR";
firma = "FIRMA";

if (receptorShipment != null)
{
	loginReceptor = delegator.findByPrimaryKey("UserLogin", UtilMisc.toMap("userLoginId", receptorShipment));
	if (loginReceptor != null)
	{
		partyLoginR = loginReceptor.get("partyId");
		if (partyLoginR != null)
		{
			partyReceptor = delegator.findByPrimaryKey("Person", UtilMisc.toMap("partyId", partyLoginR));
			if (partyReceptor != null)
			{
				receptor = partyReceptor.get("firstName") + " " + partyReceptor.get("lastName");
				firma = partyReceptor.get("firmaId");
				if (receptor == null)
				{
					receptor = "RECEPTOR";
				}
				if (firma == null)
				{
					firma = "FIRMA";
				}
			}
		}
	}
}

guion1 = createdDate.indexOf("-");
guion2 = createdDate.lastIndexOf("-");
createdDay = createdDate.substring(guion2 + 1, guion2 + 3);
createdMonth = createdDate.substring(guion1 + 1, guion2);
switch ( createdMonth )
{
      case "01":
           cMonth = "Enero";
           break;
      case "02":
           cMonth = "Febrero";
           break;
      case "03":
           cMonth = "Marzo";
           break;
      case "04":
           cMonth = "Abril";
           break;
      case "05":
           cMonth = "Mayo";
           break;
      case "06":
           cMonth = "Junio";
           break;
      case "07":
           cMonth = "Julio";
           break;
      case "08":
           cMonth = "Agosto";
           break;
      case "09":
           cMonth = "Septiembre";
           break;
      case "10":
           cMonth = "Octubre";
           break;
      case "11":
           cMonth = "Noviembre";
           break;
      case "12":
           cMonth = "Diciembre";
           break;
      default:
           cMonth = "Mes";
           break;
}
createdYear = createdDate.substring(0, guion1);
createdDate = createdDate.substring(guion2 + 1, guion2 + 3) +
        "/" + createdDate.substring(guion1 + 1, guion2) +
        "/" + createdDate.substring(0, guion1);
guion1 = fechaFactura.indexOf("-");
guion2 = fechaFactura.lastIndexOf("-");
fechaFactura = fechaFactura.substring(guion2 + 1, guion2 + 3) +
        "/" + fechaFactura.substring(guion1 + 1, guion2) +
        "/" + fechaFactura.substring(0, guion1);
montoLetraFactura = UtilNumberToLetter.convertNumberToLetter(montoFactura.doubleValue());
montoFactura = UtilFormatOut.formatPrice(montoFactura);
Calendar calendar = Calendar.getInstance();
calendar.setTimeInMillis(System.currentTimeMillis());
currentYear = UtilFormatOut.formatPaddedNumber(calendar.get(Calendar.YEAR), 4);
currentMonth = UtilFormatOut.formatPaddedNumber(calendar.get(Calendar.MONTH) + 1, 2);
currentDay = UtilFormatOut.formatPaddedNumber(calendar.get(Calendar.DAY_OF_MONTH), 2);

context.put("numeroFactura", numeroFactura);
context.put("montoFactura", montoFactura);
context.put("montoLetraFactura", montoLetraFactura);
context.put("createdDate", createdDate);
context.put("shipmentReceipts", shipmentReceipts);
context.put("createdYear", createdYear);
context.put("createdMonth", cMonth);
context.put("createdDay", createdDay);
context.put("proveedor", proveedor);
context.put("idAlmacenReceptor", idAlmacenReceptor);
context.put("almacenReceptor", almacenReceptor);
context.put("fechaFactura", fechaFactura);
context.put("receptor", receptor);
context.put("firma", firma);